#include "pentesting.h"
#include <QDebug>
#include <QStandardPaths>  

Pentesting::Pentesting(QTextEdit* logsArea, QObject* parent)
    : QObject(parent), logsArea(logsArea), nmapProcess(new QProcess(this)) {
    connect(nmapProcess, &QProcess::readyReadStandardOutput, this, &Pentesting::handleNmapOutput);
    connect(nmapProcess, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
            this, &Pentesting::handleNmapFinished);
}

void Pentesting::runAllTests(const QString& url) {
    if (!isNmapAvailable()) {
        logsArea->append("Nmap is not installed or not accessible.");
        return;
    }

    logsArea->append("Running pentests...\n");
    QStringList args;
    args << "-sS" << url << "-v"; 

    nmapProcess->start("nmap", args);

    if (!nmapProcess->waitForStarted()) {
        logsArea->append("Failed to start nmap process.");
        return;
    }

    logsArea->append("Nmap scan started for: " + url + "\n");
}

void Pentesting::handleNmapOutput() {
    QByteArray output = nmapProcess->readAllStandardOutput();
    logsArea->append(QString(output));
}

void Pentesting::handleNmapFinished(int exitCode, QProcess::ExitStatus exitStatus) {
    if (exitStatus == QProcess::NormalExit) {
        logsArea->append("Nmap scan completed with exit code: " + QString::number(exitCode));
    } else {
        logsArea->append("Nmap process crashed.");
    }
}

bool Pentesting::isNmapAvailable() {
    QProcess checkNmap;
    checkNmap.start("which", QStringList() << "nmap");
    checkNmap.waitForFinished();
    return checkNmap.exitCode() == 0;
}
