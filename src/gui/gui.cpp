#include "gui.h"
#include "logs.h"
#include "proxychains.h"
#include "CustomTabBar.h"
#include "CustomTabWidget.h"
#include <QApplication>
#include <QWidget>
#include <QUrl>
#include <QWebEngineView>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QLineEdit>
#include <QPushButton>
#include <QTabWidget>
#include <QIcon>
#include <QTextEdit>
#include <QLabel>
#include <QProgressBar>
#include <QDialog>
#include <QCloseEvent>
#include <QProcess>
#include <memory>
#include <QNetworkProxy>



ProxyChains proxyChains("../ProxyChains/proxies.txt");

void showPentestingLogs(QTextEdit* logsArea) {
    logsArea->setText("Pentesting logs:\n - Test 1: Passed\n - Test 2: Failed\n - Test 3: Running...");
}


QWidget* createNewTab(QTabWidget* tabWidget, const QString& initialContentPath, Logger* logger, QTextEdit* logsArea) {
    QWidget* tab = new QWidget;
    QVBoxLayout* tabLayout = new QVBoxLayout(tab);

    QWebEngineView* view = new QWebEngineView;
    QProgressBar* loadingIndicator = new QProgressBar;
    loadingIndicator->setRange(0, 0);
    loadingIndicator->setTextVisible(false);
    loadingIndicator->hide();
    tabLayout->addWidget(loadingIndicator);
    tabLayout->addWidget(view);

    QString proxy = proxyChains.getNextProxy(); 

     QNetworkProxy networkProxy;
    networkProxy.setType(QNetworkProxy::HttpProxy);  
    networkProxy.setHostName(proxy.split(':').first());
    networkProxy.setPort(proxy.split(':').last().toUInt());
    QNetworkProxy::setApplicationProxy(networkProxy);

    QObject::connect(view, &QWebEngineView::loadStarted, [loadingIndicator, logger, view]() {
        loadingIndicator->show();
        logger->logNetworkRequest(view->url().toString());
    });

    QObject::connect(view, &QWebEngineView::loadFinished, [loadingIndicator, logger, view](bool success) {
        loadingIndicator->hide();
        int statusCode = success ? 200 : 404;
        logger->logNetworkResponse(view->url().toString(), statusCode);
    });

    view->setUrl(QUrl(initialContentPath));

    return tab;
}


void openTerminal() {
    #ifdef Q_OS_LINUX
        QProcess::startDetached("x-terminal-emulator", QStringList());
    #elif defined(Q_OS_WIN)
        QProcess::startDetached("cmd.exe", QStringList());
    #elif defined(Q_OS_MAC)
        QProcess::startDetached("open", QStringList() << "-a" << "Terminal");
    #endif
}



void initializeGui(int argc, char** argv) {
    QApplication app(argc, argv);


    QWidget window;
    window.resize(1024, 768);
    window.setWindowTitle("MCore Pentesting Browser");

    std::unique_ptr<CustomTabWidget> tabWidget = std::make_unique<CustomTabWidget>();
    std::unique_ptr<CustomTabBar> tabBar = std::make_unique<CustomTabBar>(tabWidget.get());
    tabWidget->setCustomTabBar(tabBar.get());

    QObject::connect(tabBar.get(), &CustomTabBar::tabCloseRequested, [tabWidget = tabWidget.get()](int index) {
        tabWidget->removeTab(index);
    });

    std::unique_ptr<QLineEdit> urlBar = std::make_unique<QLineEdit>();
    urlBar->setPlaceholderText("Enter URL here...");
    
    std::unique_ptr<QPushButton> logsButton = std::make_unique<QPushButton>(QIcon::fromTheme("document-open"), "Logs");
    std::unique_ptr<QPushButton> terminalButton = std::make_unique<QPushButton>(QIcon::fromTheme("utilities-terminal"), "Terminal");
    std::unique_ptr<QPushButton> addTabButton = std::make_unique<QPushButton>("+");

    std::unique_ptr<QTextEdit> logsArea = std::make_unique<QTextEdit>();
    logsArea->setReadOnly(true);

    std::unique_ptr<Logger> logger = std::make_unique<Logger>(logsArea.get());

    QWidget* homeTab = new QWidget;
    QVBoxLayout* homeLayout = new QVBoxLayout(homeTab);
    QLabel* welcomeLabel = new QLabel("Welcome to MCore Pentesting Browser");
    welcomeLabel->setAlignment(Qt::AlignCenter);
    welcomeLabel->setStyleSheet("font-size: 24px; font-weight: bold;");
    homeLayout->addWidget(welcomeLabel);
    QLabel* descriptionLabel = new QLabel("This is a professional pentesting browser with tabbed browsing and integrated logs.");
    descriptionLabel->setAlignment(Qt::AlignCenter);
    descriptionLabel->setWordWrap(true);
    homeLayout->addWidget(descriptionLabel);

    tabWidget->addTab(homeTab, "Home");

    QHBoxLayout* toolbarLayout = new QHBoxLayout();
    toolbarLayout->addWidget(logsButton.get());
    toolbarLayout->addWidget(terminalButton.get()); 
    toolbarLayout->addWidget(urlBar.get());
    toolbarLayout->addWidget(addTabButton.get());

    QVBoxLayout* mainLayout = new QVBoxLayout();
    mainLayout->addLayout(toolbarLayout);
    mainLayout->addWidget(tabWidget.get());

    window.setLayout(mainLayout);

    QObject::connect(logsButton.get(), &QPushButton::clicked, [logsArea = logsArea.get()]() {
        QDialog logsDialog;
        logsDialog.setWindowTitle("Pentesting Logs");
        logsDialog.resize(600, 400);

        QVBoxLayout* dialogLayout = new QVBoxLayout(&logsDialog);
        QTextEdit* dialogLogsArea = new QTextEdit();
        dialogLogsArea->setReadOnly(true);
        dialogLogsArea->setText(logsArea->toPlainText());

        dialogLayout->addWidget(dialogLogsArea);
        logsDialog.exec();
    });

    QObject::connect(terminalButton.get(), &QPushButton::clicked, openTerminal);

    QObject::connect(addTabButton.get(), &QPushButton::clicked, [tabWidget = tabWidget.get(), logger = logger.get(), logsArea = logsArea.get()]() {
        QWidget* newTab = createNewTab(tabWidget, "https://google.com", logger, logsArea);
        tabWidget->addTab(newTab, "New Tab");
        tabWidget->setCurrentWidget(newTab);
    });

    QObject::connect(urlBar.get(), &QLineEdit::returnPressed, [tabWidget = tabWidget.get(), urlBar = urlBar.get(), logger = logger.get(), logsArea = logsArea.get()]() {
        QString urlText = urlBar->text();
        if (!urlText.startsWith("https://", Qt::CaseInsensitive)) {
            urlText.prepend("https://");
        }
        QWebEngineView* view = tabWidget->currentWidget()->findChild<QWebEngineView*>();
        if (view) {
            view->setUrl(QUrl(urlText));
            tabWidget->setTabText(tabWidget->currentIndex(), urlText);
            logger->logNetworkRequest(urlText);
        } else {
            QWidget* newTab = createNewTab(tabWidget, urlText, logger, logsArea);
            tabWidget->addTab(newTab, urlText);
            tabWidget->setCurrentWidget(newTab);
        }
    });

    QObject::connect(tabWidget.get(), &QTabWidget::currentChanged, [tabWidget = tabWidget.get(), urlBar = urlBar.get()]() {
        QWebEngineView* view = tabWidget->currentWidget()->findChild<QWebEngineView*>();
        if (view) {
            urlBar->setText(view->url().toString());
        }
    });

    window.show();
    app.exec();
}
