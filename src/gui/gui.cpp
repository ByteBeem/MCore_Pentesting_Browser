#include "gui.h"
#include "logs.h"
#include <QApplication>
#include <QWidget>
#include <QUrl>
#include <QWebEngineView>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QLineEdit>
#include <QPushButton>
#include <QTabWidget>
#include <QIcon>
#include <QTextEdit>
#include <QLabel>
#include <QProgressBar>
#include <QDialog>
#include <QCloseEvent>

void showPentestingLogs(QTextEdit* logsArea) {
    logsArea->setText("Pentesting logs:\n - Test 1: Passed\n - Test 2: Failed\n - Test 3: Running...");
}

QWidget* createNewTab(QTabWidget* tabWidget, const QString& initialContentPath, Logger* logger, QTextEdit* logsArea) {
    QWidget* tab = new QWidget;
    QVBoxLayout* tabLayout = new QVBoxLayout(tab);

    QWebEngineView* view = new QWebEngineView;
    QProgressBar* loadingIndicator = new QProgressBar;
    loadingIndicator->setRange(0, 0);
    loadingIndicator->setTextVisible(false);
    loadingIndicator->hide();
    tabLayout->addWidget(loadingIndicator);
    tabLayout->addWidget(view);

    QObject::connect(view, &QWebEngineView::loadStarted, [loadingIndicator, logger, view]() {
        loadingIndicator->show();
        logger->logNetworkRequest(view->url().toString());
    });

    QObject::connect(view, &QWebEngineView::loadFinished, [loadingIndicator, logger, view](bool success) {
        loadingIndicator->hide();
        int statusCode = success ? 200 : 404;
        logger->logNetworkResponse(view->url().toString(), statusCode);
    });

    view->setUrl(QUrl(initialContentPath));

    return tab;
}

void initializeGui(int argc, char** argv) {
    QApplication app(argc, argv);

    QWidget window;
    window.resize(1024, 768);
    window.setWindowTitle("MCore Pentesting Browser");

    QTabWidget* tabWidget = new QTabWidget;
    QLineEdit* urlBar = new QLineEdit();
    urlBar->setPlaceholderText("Enter URL here...");
    QPushButton* logsButton = new QPushButton(QIcon::fromTheme("document-open"), "Logs");
    QPushButton* addTabButton = new QPushButton("+");

    QTextEdit* logsArea = new QTextEdit();
    logsArea->setReadOnly(true);

    Logger* logger = new Logger(logsArea);

    QWidget* homeTab = new QWidget;
    QVBoxLayout* homeLayout = new QVBoxLayout(homeTab);
    QLabel* welcomeLabel = new QLabel("Welcome to MCore Pentesting Browser");
    welcomeLabel->setAlignment(Qt::AlignCenter);
    welcomeLabel->setStyleSheet("font-size: 24px; font-weight: bold;");
    homeLayout->addWidget(welcomeLabel);
    QLabel* descriptionLabel = new QLabel("This is a professional pentesting browser with tabbed browsing and integrated logs.");
    descriptionLabel->setAlignment(Qt::AlignCenter);
    descriptionLabel->setWordWrap(true);
    homeLayout->addWidget(descriptionLabel);

    tabWidget->addTab(homeTab, "Home");

    QHBoxLayout* toolbarLayout = new QHBoxLayout();
    toolbarLayout->addWidget(logsButton);
    toolbarLayout->addWidget(urlBar);
    toolbarLayout->addWidget(addTabButton);

    QVBoxLayout* mainLayout = new QVBoxLayout();
    mainLayout->addLayout(toolbarLayout);
    mainLayout->addWidget(tabWidget);

    window.setLayout(mainLayout);

    
    QObject::connect(logsButton, &QPushButton::clicked, [logsArea]() {
        QDialog logsDialog;
        logsDialog.setWindowTitle("Pentesting Logs");
        logsDialog.resize(600, 400);

        QVBoxLayout* dialogLayout = new QVBoxLayout(&logsDialog);
        QTextEdit* dialogLogsArea = new QTextEdit();
        dialogLogsArea->setReadOnly(true);
        dialogLogsArea->setText(logsArea->toPlainText()); 

        dialogLayout->addWidget(dialogLogsArea);
        logsDialog.exec(); 
    });

    QObject::connect(addTabButton, &QPushButton::clicked, [tabWidget, logger, logsArea]() {
        QWidget* newTab = createNewTab(tabWidget, "https://www.example.com", logger, logsArea);
        tabWidget->addTab(newTab, "New Tab");
        tabWidget->setCurrentWidget(newTab);
    });

    QObject::connect(urlBar, &QLineEdit::returnPressed, [tabWidget, urlBar, logger, logsArea]() {
        QString urlText = urlBar->text();
        if (!urlText.startsWith("https://", Qt::CaseInsensitive)) {
            urlText.prepend("https://");
        }
        QWebEngineView* view = tabWidget->currentWidget()->findChild<QWebEngineView*>();
        if (view) {
            view->setUrl(QUrl(urlText));
            tabWidget->setTabText(tabWidget->currentIndex(), urlText);
            logger->logNetworkRequest(urlText);
        } else {
            QWidget* newTab = createNewTab(tabWidget, urlText, logger, logsArea);
            tabWidget->addTab(newTab, urlText);
            tabWidget->setCurrentWidget(newTab);
        }
    });

    QObject::connect(tabWidget, &QTabWidget::currentChanged, [tabWidget, urlBar]() {
        QWebEngineView* view = tabWidget->currentWidget()->findChild<QWebEngineView*>();
        if (view) {
            urlBar->setText(view->url().toString());
        }
    });

    window.show();
    app.exec();
}
