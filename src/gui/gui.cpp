#include "gui.h"
#include "terminal.h"
#include <QApplication>
#include <QWidget>
#include <QVBoxLayout>
#include <QPushButton>
#include <QTabWidget>
#include <QLineEdit>
#include <QTextEdit>
#include <QLabel>
#include <QDialog>

void openTerminal() {
    Terminal *terminal = new Terminal();
    terminal->resize(800, 600);
    terminal->setWindowTitle("Terminal");
    terminal->show();
}

void initializeGui(int argc, char** argv) {
    QApplication app(argc, argv);

    QWidget window;
    window.resize(1024, 768);
    window.setWindowTitle("MCore Pentesting Browser");

    QTabWidget *tabWidget = new QTabWidget;
    QLineEdit *urlBar = new QLineEdit();
    urlBar->setPlaceholderText("Enter URL here...");
    QPushButton *logsButton = new QPushButton("Logs");
    QPushButton *addTabButton = new QPushButton("+");
    QPushButton *terminalButton = new QPushButton("Terminal");

    QTextEdit *logsArea = new QTextEdit();
    logsArea->setReadOnly(true);

    QWidget *homeTab = new QWidget;
    QVBoxLayout *homeLayout = new QVBoxLayout(homeTab);
    QLabel *welcomeLabel = new QLabel("Welcome to MCore Pentesting Browser");
    welcomeLabel->setAlignment(Qt::AlignCenter);
    welcomeLabel->setStyleSheet("font-size: 24px; font-weight: bold;");
    homeLayout->addWidget(welcomeLabel);
    QLabel *descriptionLabel = new QLabel("This is a professional pentesting browser with tabbed browsing and integrated logs.");
    descriptionLabel->setAlignment(Qt::AlignCenter);
    descriptionLabel->setWordWrap(true);
    homeLayout->addWidget(descriptionLabel);

    tabWidget->addTab(homeTab, "Home");

    QHBoxLayout *toolbarLayout = new QHBoxLayout();
    toolbarLayout->addWidget(logsButton);
    toolbarLayout->addWidget(urlBar);
    toolbarLayout->addWidget(addTabButton);
    toolbarLayout->addWidget(terminalButton);

    QVBoxLayout *mainLayout = new QVBoxLayout();
    mainLayout->addLayout(toolbarLayout);
    mainLayout->addWidget(tabWidget);

    window.setLayout(mainLayout);

    QObject::connect(logsButton, &QPushButton::clicked, [logsArea]() {
        QDialog logsDialog;
        logsDialog.setWindowTitle("Pentesting Logs");
        logsDialog.resize(600, 400);

        QVBoxLayout *dialogLayout = new QVBoxLayout(&logsDialog);
        QTextEdit *dialogLogsArea = new QTextEdit();
        dialogLogsArea->setReadOnly(true);
        dialogLogsArea->setText(logsArea->toPlainText());

        dialogLayout->addWidget(dialogLogsArea);
        logsDialog.exec();
    });

    QObject::connect(addTabButton, &QPushButton::clicked, [tabWidget]() {
        QWidget *newTab = new QWidget;
        tabWidget->addTab(newTab, "New Tab");
        tabWidget->setCurrentWidget(newTab);
    });

    QObject::connect(urlBar, &QLineEdit::returnPressed, [tabWidget, urlBar]() {
        QString urlText = urlBar->text();
        if (!urlText.startsWith("https://", Qt::CaseInsensitive)) {
            urlText.prepend("https://");
        }
        QWebEngineView *view = tabWidget->currentWidget()->findChild<QWebEngineView*>();
        if (view) {
            view->setUrl(QUrl(urlText));
            tabWidget->setTabText(tabWidget->currentIndex(), urlText);
        } else {
            QWidget *newTab = new QWidget;
            tabWidget->addTab(newTab, urlText);
            tabWidget->setCurrentWidget(newTab);
        }
    });

    QObject::connect(tabWidget, &QTabWidget::currentChanged, [tabWidget, urlBar]() {
        QWebEngineView *view = tabWidget->currentWidget()->findChild<QWebEngineView*>();
        if (view) {
            urlBar->setText(view->url().toString());
        }
    });

    QObject::connect(terminalButton, &QPushButton::clicked, openTerminal);

    window.show();
    app.exec();
}
